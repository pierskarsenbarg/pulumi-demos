"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketV2 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a S3 bucket resource.
 *
 * > This functionality is for managing S3 in an AWS Partition. To manage [S3 on Outposts](https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html), see the `aws.s3control.Bucket` resource.
 *
 * > In April 2023, [AWS introduced](https://aws.amazon.com/about-aws/whats-new/2022/12/amazon-s3-automatically-enable-block-public-access-disable-access-control-lists-buckets-april-2023/) updated security defaults for new S3 buckets. See this issue for a information on how this affects the `aws.s3.BucketV2` resource.
 *
 * ## Example Usage
 * ### Private Bucket With Tags
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketV2("example", {tags: {
 *     Environment: "Dev",
 *     Name: "My bucket",
 * }});
 * ```
 * ### Static Website Hosting
 *
 * > **NOTE:** The `website` attribute is deprecated.
 * See `aws.s3.BucketWebsiteConfigurationV2` for examples with static website hosting configured.
 *
 * ### CORS Rules
 *
 * > **NOTE:** The `corsRule` attribute is deprecated.
 * See `aws.s3.BucketCorsConfigurationV2` for examples with CORS rules configured.
 *
 * ### Versioning
 *
 * > **NOTE:** The `versioning` attribute is deprecated.
 * See `aws.s3.BucketVersioningV2` for examples with versioning configured.
 *
 * ### Logging
 *
 * > **NOTE:** The `logging` attribute is deprecated.
 * See `aws.s3.BucketLoggingV2` for examples with logging enabled.
 *
 * ### Object Lifecycle Rules
 *
 * > **NOTE:** The `lifecycleRule` attribute is deprecated.
 * See `aws.s3.BucketLifecycleConfigurationV2` for examples with object lifecycle rules.
 *
 * ### Object Lock Configuration
 *
 * > **NOTE:** The `objectLockConfiguration` attribute is deprecated.
 * See `aws.s3.BucketObjectLockConfigurationV2` for examples with object lock configurations on both new and existing buckets.
 *
 * ### Replication Configuration
 *
 * > **NOTE:** The `replicationConfiguration` attribute is deprecated.
 * See `aws.s3.BucketReplicationConfig` for examples with replication configured.
 *
 * ### Enable SSE-KMS Server Side Encryption
 *
 * > **NOTE:** The `serverSideEncryptionConfiguration` attribute is deprecated.
 * See `aws.s3.BucketServerSideEncryptionConfigurationV2` for examples with server side encryption configured.
 *
 * ### ACL Policy Grants
 *
 * > **NOTE:** The `acl` and `grant` attributes are deprecated.
 * See `aws.s3.BucketAclV2` for examples with ACL grants.
 *
 * ## Import
 *
 * S3 bucket can be imported using the `bucket`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:s3/bucketV2:BucketV2 bucket bucket-name
 * ```
 */
class BucketV2 extends pulumi.CustomResource {
    /**
     * Get an existing BucketV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BucketV2(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BucketV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketV2.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accelerationStatus"] = state ? state.accelerationStatus : undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["bucketDomainName"] = state ? state.bucketDomainName : undefined;
            resourceInputs["bucketPrefix"] = state ? state.bucketPrefix : undefined;
            resourceInputs["bucketRegionalDomainName"] = state ? state.bucketRegionalDomainName : undefined;
            resourceInputs["corsRules"] = state ? state.corsRules : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["grants"] = state ? state.grants : undefined;
            resourceInputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            resourceInputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            resourceInputs["loggings"] = state ? state.loggings : undefined;
            resourceInputs["objectLockConfiguration"] = state ? state.objectLockConfiguration : undefined;
            resourceInputs["objectLockEnabled"] = state ? state.objectLockEnabled : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["replicationConfigurations"] = state ? state.replicationConfigurations : undefined;
            resourceInputs["requestPayer"] = state ? state.requestPayer : undefined;
            resourceInputs["serverSideEncryptionConfigurations"] = state ? state.serverSideEncryptionConfigurations : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["versionings"] = state ? state.versionings : undefined;
            resourceInputs["websiteDomain"] = state ? state.websiteDomain : undefined;
            resourceInputs["websiteEndpoint"] = state ? state.websiteEndpoint : undefined;
            resourceInputs["websites"] = state ? state.websites : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["accelerationStatus"] = args ? args.accelerationStatus : undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["bucketPrefix"] = args ? args.bucketPrefix : undefined;
            resourceInputs["corsRules"] = args ? args.corsRules : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["grants"] = args ? args.grants : undefined;
            resourceInputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            resourceInputs["loggings"] = args ? args.loggings : undefined;
            resourceInputs["objectLockConfiguration"] = args ? args.objectLockConfiguration : undefined;
            resourceInputs["objectLockEnabled"] = args ? args.objectLockEnabled : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["replicationConfigurations"] = args ? args.replicationConfigurations : undefined;
            resourceInputs["requestPayer"] = args ? args.requestPayer : undefined;
            resourceInputs["serverSideEncryptionConfigurations"] = args ? args.serverSideEncryptionConfigurations : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["versionings"] = args ? args.versionings : undefined;
            resourceInputs["websites"] = args ? args.websites : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["bucketDomainName"] = undefined /*out*/;
            resourceInputs["bucketRegionalDomainName"] = undefined /*out*/;
            resourceInputs["hostedZoneId"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["websiteDomain"] = undefined /*out*/;
            resourceInputs["websiteEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "aws:s3/bucket:Bucket" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(BucketV2.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BucketV2 = BucketV2;
/** @internal */
BucketV2.__pulumiType = 'aws:s3/bucketV2:BucketV2';
//# sourceMappingURL=bucketV2.js.map