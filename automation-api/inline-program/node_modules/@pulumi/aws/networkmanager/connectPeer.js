"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectPeer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS NetworkManager Connect Peer.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * `aws_networkmanager_connect_peer` can be imported using the connect peer ID, e.g.
 *
 * ```sh
 *  $ pulumi import aws:networkmanager/connectPeer:ConnectPeer example connect-peer-061f3e96275db1acc
 * ```
 */
class ConnectPeer extends pulumi.CustomResource {
    /**
     * Get an existing ConnectPeer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ConnectPeer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ConnectPeer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectPeer.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bgpOptions"] = state ? state.bgpOptions : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["connectAttachmentId"] = state ? state.connectAttachmentId : undefined;
            resourceInputs["connectPeerId"] = state ? state.connectPeerId : undefined;
            resourceInputs["coreNetworkAddress"] = state ? state.coreNetworkAddress : undefined;
            resourceInputs["coreNetworkId"] = state ? state.coreNetworkId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["edgeLocation"] = state ? state.edgeLocation : undefined;
            resourceInputs["insideCidrBlocks"] = state ? state.insideCidrBlocks : undefined;
            resourceInputs["peerAddress"] = state ? state.peerAddress : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.connectAttachmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectAttachmentId'");
            }
            if ((!args || args.insideCidrBlocks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'insideCidrBlocks'");
            }
            if ((!args || args.peerAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerAddress'");
            }
            resourceInputs["bgpOptions"] = args ? args.bgpOptions : undefined;
            resourceInputs["connectAttachmentId"] = args ? args.connectAttachmentId : undefined;
            resourceInputs["coreNetworkAddress"] = args ? args.coreNetworkAddress : undefined;
            resourceInputs["insideCidrBlocks"] = args ? args.insideCidrBlocks : undefined;
            resourceInputs["peerAddress"] = args ? args.peerAddress : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["configurations"] = undefined /*out*/;
            resourceInputs["connectPeerId"] = undefined /*out*/;
            resourceInputs["coreNetworkId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["edgeLocation"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectPeer.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ConnectPeer = ConnectPeer;
/** @internal */
ConnectPeer.__pulumiType = 'aws:networkmanager/connectPeer:ConnectPeer';
//# sourceMappingURL=connectPeer.js.map