import * as pulumi from "@pulumi/pulumi";
/**
 * Manages status (recording / stopped) of an AWS Config Configuration Recorder.
 *
 * > **Note:** Starting Configuration Recorder requires a Delivery Channel to be present. Use of `dependsOn` (as shown below) is recommended to avoid race conditions.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucketV2 = new aws.s3.BucketV2("bucketV2", {});
 * const fooDeliveryChannel = new aws.cfg.DeliveryChannel("fooDeliveryChannel", {s3BucketName: bucketV2.bucket});
 * const fooRecorderStatus = new aws.cfg.RecorderStatus("fooRecorderStatus", {isEnabled: true}, {
 *     dependsOn: [fooDeliveryChannel],
 * });
 * const assumeRole = aws.iam.getPolicyDocument({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["config.amazonaws.com"],
 *         }],
 *         actions: ["sts:AssumeRole"],
 *     }],
 * });
 * const role = new aws.iam.Role("role", {assumeRolePolicy: assumeRole.then(assumeRole => assumeRole.json)});
 * const rolePolicyAttachment = new aws.iam.RolePolicyAttachment("rolePolicyAttachment", {
 *     role: role.name,
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AWS_ConfigRole",
 * });
 * const fooRecorder = new aws.cfg.Recorder("fooRecorder", {roleArn: role.arn});
 * const policyDocument = aws.iam.getPolicyDocumentOutput({
 *     statements: [{
 *         effect: "Allow",
 *         actions: ["s3:*"],
 *         resources: [
 *             bucketV2.arn,
 *             pulumi.interpolate`${bucketV2.arn}/*`,
 *         ],
 *     }],
 * });
 * const rolePolicy = new aws.iam.RolePolicy("rolePolicy", {
 *     role: role.id,
 *     policy: policyDocument.apply(policyDocument => policyDocument.json),
 * });
 * ```
 *
 * ## Import
 *
 * Configuration Recorder Status can be imported using the name of the Configuration Recorder, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cfg/recorderStatus:RecorderStatus foo example
 * ```
 */
export declare class RecorderStatus extends pulumi.CustomResource {
    /**
     * Get an existing RecorderStatus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecorderStatusState, opts?: pulumi.CustomResourceOptions): RecorderStatus;
    /**
     * Returns true if the given object is an instance of RecorderStatus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RecorderStatus;
    /**
     * Whether the configuration recorder should be enabled or disabled.
     */
    readonly isEnabled: pulumi.Output<boolean>;
    /**
     * The name of the recorder
     */
    readonly name: pulumi.Output<string>;
    /**
     * Create a RecorderStatus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecorderStatusArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering RecorderStatus resources.
 */
export interface RecorderStatusState {
    /**
     * Whether the configuration recorder should be enabled or disabled.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the recorder
     */
    name?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a RecorderStatus resource.
 */
export interface RecorderStatusArgs {
    /**
     * Whether the configuration recorder should be enabled or disabled.
     */
    isEnabled: pulumi.Input<boolean>;
    /**
     * The name of the recorder
     */
    name?: pulumi.Input<string>;
}
