"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServiceAccountOutput = exports.getServiceAccount = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Use this data source to get the Account ID of the [AWS CloudTrail Service Account](http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-supported-regions.html)
 * in a given region for the purpose of allowing CloudTrail to store trail data in S3.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const main = aws.cloudtrail.getServiceAccount({});
 * const bucket = new aws.s3.BucketV2("bucket", {forceDestroy: true});
 * const allowCloudtrailLoggingPolicyDocument = pulumi.all([main, bucket.arn, main, bucket.arn]).apply(([main, bucketArn, main1, bucketArn1]) => aws.iam.getPolicyDocumentOutput({
 *     statements: [
 *         {
 *             sid: "Put bucket policy needed for trails",
 *             effect: "Allow",
 *             principals: [{
 *                 type: "AWS",
 *                 identifiers: [main.arn],
 *             }],
 *             actions: ["s3:PutObject"],
 *             resources: [`${bucketArn}/*`],
 *         },
 *         {
 *             sid: "Get bucket policy needed for trails",
 *             effect: "Allow",
 *             principals: [{
 *                 type: "AWS",
 *                 identifiers: [main1.arn],
 *             }],
 *             actions: ["s3:GetBucketAcl"],
 *             resources: [bucketArn1],
 *         },
 *     ],
 * }));
 * const allowCloudtrailLoggingBucketPolicy = new aws.s3.BucketPolicy("allowCloudtrailLoggingBucketPolicy", {
 *     bucket: bucket.id,
 *     policy: allowCloudtrailLoggingPolicyDocument.apply(allowCloudtrailLoggingPolicyDocument => allowCloudtrailLoggingPolicyDocument.json),
 * });
 * ```
 */
function getServiceAccount(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:cloudtrail/getServiceAccount:getServiceAccount", {
        "region": args.region,
    }, opts);
}
exports.getServiceAccount = getServiceAccount;
/**
 * Use this data source to get the Account ID of the [AWS CloudTrail Service Account](http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-supported-regions.html)
 * in a given region for the purpose of allowing CloudTrail to store trail data in S3.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const main = aws.cloudtrail.getServiceAccount({});
 * const bucket = new aws.s3.BucketV2("bucket", {forceDestroy: true});
 * const allowCloudtrailLoggingPolicyDocument = pulumi.all([main, bucket.arn, main, bucket.arn]).apply(([main, bucketArn, main1, bucketArn1]) => aws.iam.getPolicyDocumentOutput({
 *     statements: [
 *         {
 *             sid: "Put bucket policy needed for trails",
 *             effect: "Allow",
 *             principals: [{
 *                 type: "AWS",
 *                 identifiers: [main.arn],
 *             }],
 *             actions: ["s3:PutObject"],
 *             resources: [`${bucketArn}/*`],
 *         },
 *         {
 *             sid: "Get bucket policy needed for trails",
 *             effect: "Allow",
 *             principals: [{
 *                 type: "AWS",
 *                 identifiers: [main1.arn],
 *             }],
 *             actions: ["s3:GetBucketAcl"],
 *             resources: [bucketArn1],
 *         },
 *     ],
 * }));
 * const allowCloudtrailLoggingBucketPolicy = new aws.s3.BucketPolicy("allowCloudtrailLoggingBucketPolicy", {
 *     bucket: bucket.id,
 *     policy: allowCloudtrailLoggingPolicyDocument.apply(allowCloudtrailLoggingPolicyDocument => allowCloudtrailLoggingPolicyDocument.json),
 * });
 * ```
 */
function getServiceAccountOutput(args, opts) {
    return pulumi.output(args).apply((a) => getServiceAccount(a, opts));
}
exports.getServiceAccountOutput = getServiceAccountOutput;
//# sourceMappingURL=getServiceAccount.js.map