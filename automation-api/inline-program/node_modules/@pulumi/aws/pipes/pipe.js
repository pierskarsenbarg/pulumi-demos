"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pipe = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS EventBridge Pipes Pipe.
 *
 * You can find out more about EventBridge Pipes in the [User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html).
 *
 * > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const main = aws.getCallerIdentity({});
 * const test = new aws.iam.Role("test", {assumeRolePolicy: main.then(main => JSON.stringify({
 *     Version: "2012-10-17",
 *     Statement: {
 *         Effect: "Allow",
 *         Action: "sts:AssumeRole",
 *         Principal: {
 *             Service: "pipes.amazonaws.com",
 *         },
 *         Condition: {
 *             StringEquals: {
 *                 "aws:SourceAccount": main.accountId,
 *             },
 *         },
 *     },
 * }))});
 * const sourceQueue = new aws.sqs.Queue("sourceQueue", {});
 * const sourceRolePolicy = new aws.iam.RolePolicy("sourceRolePolicy", {
 *     role: test.id,
 *     policy: sourceQueue.arn.apply(arn => JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Effect: "Allow",
 *             Action: [
 *                 "sqs:DeleteMessage",
 *                 "sqs:GetQueueAttributes",
 *                 "sqs:ReceiveMessage",
 *             ],
 *             Resource: [arn],
 *         }],
 *     })),
 * });
 * const targetQueue = new aws.sqs.Queue("targetQueue", {});
 * const targetRolePolicy = new aws.iam.RolePolicy("targetRolePolicy", {
 *     role: test.id,
 *     policy: targetQueue.arn.apply(arn => JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Effect: "Allow",
 *             Action: ["sqs:SendMessage"],
 *             Resource: [arn],
 *         }],
 *     })),
 * });
 * const example = new aws.pipes.Pipe("example", {
 *     roleArn: aws_iam_role.example.arn,
 *     source: sourceQueue.arn,
 *     target: targetQueue.arn,
 *     sourceParameters: {},
 *     targetParameters: {},
 * }, {
 *     dependsOn: [
 *         sourceRolePolicy,
 *         targetRolePolicy,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Pipes can be imported using the `name`. For example
 *
 * ```sh
 *  $ pulumi import aws:pipes/pipe:Pipe example my-pipe
 * ```
 */
class Pipe extends pulumi.CustomResource {
    /**
     * Get an existing Pipe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Pipe(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Pipe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipe.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredState"] = state ? state.desiredState : undefined;
            resourceInputs["enrichment"] = state ? state.enrichment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceParameters"] = state ? state.sourceParameters : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["targetParameters"] = state ? state.targetParameters : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.sourceParameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceParameters'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            if ((!args || args.targetParameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetParameters'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredState"] = args ? args.desiredState : undefined;
            resourceInputs["enrichment"] = args ? args.enrichment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceParameters"] = args ? args.sourceParameters : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["targetParameters"] = args ? args.targetParameters : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pipe.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Pipe = Pipe;
/** @internal */
Pipe.__pulumiType = 'aws:pipes/pipe:Pipe';
//# sourceMappingURL=pipe.js.map